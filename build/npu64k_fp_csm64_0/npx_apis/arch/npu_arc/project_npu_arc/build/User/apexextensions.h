
/* **** DO NOT EDIT - this file is generated by ARChitect2 ****
 *
 * Description: Header file declaring the compiler extensions for apex components 
 */

#ifndef _apexextensions_H_
#define _apexextensions_H_

#define APEX_EVENTMANAGER_PRESENT	1

// User extension aux register EVT_CTRL
#define AR_EVT_CTRL 0xf02
#pragma Aux_register(0xf02, name=>"EVT_CTRL")

// User extension aux register EVT_FILTER_LO
#define AR_EVT_FILTER_LO 0xf04
#pragma Aux_register(0xf04, name=>"EVT_FILTER_LO")

// User extension aux register EVT_FILTER_HI
#define AR_EVT_FILTER_HI 0xf05
#pragma Aux_register(0xf05, name=>"EVT_FILTER_HI")

// User extension aux register EVT_CNT_SEL
#define AR_EVT_CNT_SEL 0xf0a
#pragma Aux_register(0xf0a, name=>"EVT_CNT_SEL")

// User extension aux register EVT_CNT_VAL
#define AR_EVT_CNT_VAL 0xf0b
#pragma Aux_register(0xf0b, name=>"EVT_CNT_VAL")

// User extension aux register EVT_VM_SEL
#define AR_EVT_VM_SEL 0xf00
#pragma Aux_register(0xf00, name=>"EVT_VM_SEL")

// User extension aux register EVT_VM_MAP
#define AR_EVT_VM_MAP 0xf01
#pragma Aux_register(0xf01, name=>"EVT_VM_MAP")

// User extension aux register EVT_GRP_SEL
#define AR_EVT_GRP_SEL 0xf07
#pragma Aux_register(0xf07, name=>"EVT_GRP_SEL")

// User extension aux register EVT_SID
#define AR_EVT_SID 0xf08
#pragma Aux_register(0xf08, name=>"EVT_SID")

// User extension aux register EVT_SSID
#define AR_EVT_SSID 0xf09
#pragma Aux_register(0xf09, name=>"EVT_SSID")

// User extension aux register EVT_IRQ
#define AR_EVT_IRQ 0xf03
#pragma Aux_register(0xf03, name=>"EVT_IRQ")

// User extension instruction EVTMASKCHK
extern long long EVTMASKCHK(long long);
#pragma intrinsic(EVTMASKCHK,opcode=>7,sub_opcode=>0,blocking_cycles=> 3)

// User extension instruction EVTMASKCHK
extern long long EVTMASKCHK_f(long long);
#pragma intrinsic(EVTMASKCHK_f,opcode=>7,sub_opcode=>0, set_flags => 1, flags => "zncv",blocking_cycles=> 3)

// User extension instruction EVTMASKALL
extern long long EVTMASKALL(long long);
#pragma intrinsic(EVTMASKALL,opcode=>7,sub_opcode=>1,blocking_cycles=> 3)

// User extension instruction EVTMASKALL
extern long long EVTMASKALL_f(long long);
#pragma intrinsic(EVTMASKALL_f,opcode=>7,sub_opcode=>1, set_flags => 1, flags => "zncv",blocking_cycles=> 3)

// User extension instruction EVTMASKANY
extern long long EVTMASKANY(long long);
#pragma intrinsic(EVTMASKANY,opcode=>7,sub_opcode=>2,blocking_cycles=> 3)

// User extension instruction EVTMASKANY
extern long long EVTMASKANY_f(long long);
#pragma intrinsic(EVTMASKANY_f,opcode=>7,sub_opcode=>2, set_flags => 1, flags => "zncv",blocking_cycles=> 3)

// User extension instruction EVTMASKDECR
extern long long EVTMASKDECR(long long);
#pragma intrinsic(EVTMASKDECR,opcode=>7,sub_opcode=>3,blocking_cycles=> 3)

// User extension instruction EVTMASKDECR
extern long long EVTMASKDECR_f(long long);
#pragma intrinsic(EVTMASKDECR_f,opcode=>7,sub_opcode=>3, set_flags => 1, flags => "zncv",blocking_cycles=> 3)

// User extension instruction EVTMASKINCR
extern long long EVTMASKINCR(long long);
#pragma intrinsic(EVTMASKINCR,opcode=>7,sub_opcode=>4,blocking_cycles=> 3)

// User extension instruction EVTMASKINCR
extern long long EVTMASKINCR_f(long long);
#pragma intrinsic(EVTMASKINCR_f,opcode=>7,sub_opcode=>4, set_flags => 1, flags => "zncv",blocking_cycles=> 3)

// User extension instruction EVTMASKSEND
extern long long EVTMASKSEND(long long);
#pragma intrinsic(EVTMASKSEND,opcode=>7,sub_opcode=>5,blocking_cycles=> 3)

// User extension instruction EVTMASKSEND
extern long long EVTMASKSEND_f(long long);
#pragma intrinsic(EVTMASKSEND_f,opcode=>7,sub_opcode=>5, set_flags => 1, flags => "zncv",blocking_cycles=> 3)

// User extension instruction EVTVMCHK
extern long long EVTVMCHK(long long);
#pragma intrinsic(EVTVMCHK,opcode=>7,sub_opcode=>6,blocking_cycles=> 3)

// User extension instruction EVTVMCHK
extern long long EVTVMCHK_f(long long);
#pragma intrinsic(EVTVMCHK_f,opcode=>7,sub_opcode=>6, set_flags => 1, flags => "zncv",blocking_cycles=> 3)


#endif


